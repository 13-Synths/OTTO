<?xml version='1.0' encoding='utf-8'?>
<struct id="top1::timer::TimerDispatcher" name="TimerDispatcher" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <subclass access="public" name="GlobalTimerDispatcher" ref="top1::timer::GlobalTimerDispatcher#top1::timer::GlobalTimerDispatcher">
    <brief>Writes to file on destruction.</brief>
  </subclass>
  <methodtemplate id="top1::timer::TimerDispatcher::timedCall" name="timedCall">
    <brief>Time a call to function `f`</brief>
    <undocumented-return />
    <return>
      <type name="auto" />
    </return>
    <argument id="top1::timer::TimerDispatcher::timedCall::name" name="name">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
    <argument id="top1::timer::TimerDispatcher::timedCall::f" name="f">
      <type name="Callable &amp;&amp;" />
    </argument>
    <argument id="top1::timer::TimerDispatcher::timedCall::args" name="args">
      <type name="Args..." />
    </argument>
    <templatetypeparameter id="top1::timer::TimerDispatcher::timedCall::Callable" name="Callable" />
    <templatetypeparameter id="top1::timer::TimerDispatcher::timedCall::Args" name="Args" />
  </methodtemplate>
  <field id="top1::timer::TimerDispatcher::timers" name="timers">
    <type name="std::unordered_map&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, top1::timer::Timer, std::hash&lt;std::string&gt;, std::equal_to&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, top1::timer::Timer&gt; &gt; &gt;" />
  </field>
  <field id="top1::timer::TimerDispatcher::path" name="path">
    <type name="std::string" />
  </field>
  <destructor id="top1::timer::TimerDispatcher::~TimerDispatcher" name="~TimerDispatcher" virtual="yes" />
  <method id="top1::timer::TimerDispatcher::jsonSerialize" name="jsonSerialize">
    <undocumented-return />
    <return>
      <type name="nlohmann::json" />
    </return>
  </method>
  <method id="top1::timer::TimerDispatcher::timeScope" name="timeScope">
    <undocumented-return />
    <return>
      <type name="ScopeTimer" ref="top1::timer::ScopeTimer#top1::timer::ScopeTimer" />
    </return>
    <argument id="top1::timer::TimerDispatcher::timeScope::name" name="name">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="top1::timer::TimerDispatcher::writeToFile" name="writeToFile">
    <undocumented-return />
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
</struct>
