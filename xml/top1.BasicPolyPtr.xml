<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="top1::BasicPolyPtr" name="BasicPolyPtr" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="top1::BasicPolyPtr::PtrType" name="PtrType" />
  <templatetypeparameter id="top1::BasicPolyPtr::Base" name="Base" />
  <templatetypeparameter id="top1::BasicPolyPtr::Types" name="Types" />
  <structtemplate name="visitor" ref="top1::BasicPolyPtr::visitor#top1::BasicPolyPtr::visitor">
    <templatetypeparameter id="top1::BasicPolyPtr::visitor::Cases" name="Cases" />
  </structtemplate>
  <methodtemplate id="top1::BasicPolyPtr::makeVisitor" name="makeVisitor" static="yes">
    <undocumented-return />
    <return>
      <type name="BasicPolyPtr&lt;PtrType, Base, Types&gt;::visitor&lt;Cases&gt;" ref="top1::BasicPolyPtr::visitor#top1::BasicPolyPtr::visitor" />
    </return>
    <argument id="top1::BasicPolyPtr::makeVisitor::cases" name="cases">
      <type name="Cases..." />
    </argument>
    <templatetypeparameter id="top1::BasicPolyPtr::makeVisitor::Cases" name="Cases" />
  </methodtemplate>
  <constructor id="top1::BasicPolyPtr::BasicPolyPtr&lt;PtrType, Base, Types...&gt;" name="BasicPolyPtr&lt;PtrType, Base, Types...&gt;" />
  <constructor id="top1::BasicPolyPtr::BasicPolyPtr&lt;PtrType, Base, Types...&gt;" name="BasicPolyPtr&lt;PtrType, Base, Types...&gt;">
    <argument id="top1::BasicPolyPtr::BasicPolyPtr&lt;PtrType, Base, Types...&gt;::ptr" name="ptr">
      <type name="PtrType &amp;&amp;" />
    </argument>
  </constructor>
  <methodtemplate id="top1::BasicPolyPtr::BasicPolyPtr&lt;PtrType, Base, Types...&gt;" name="BasicPolyPtr&lt;PtrType, Base, Types...&gt;">
    <undocumented-return />
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="top1::BasicPolyPtr::BasicPolyPtr&lt;PtrType, Base, Types...&gt;::t" name="t">
      <type name="T" qualifier="*" />
    </argument>
    <templatetypeparameter id="top1::BasicPolyPtr::BasicPolyPtr&lt;PtrType, Base, Types...&gt;::T" name="T" />
    <templatetypeparameter id="top1::BasicPolyPtr::BasicPolyPtr&lt;PtrType, Base, Types...&gt;">
      <default>
        <type name="T" />
      </default>
    </templatetypeparameter>
  </methodtemplate>
  <method id="top1::BasicPolyPtr::valid" name="valid">
    <undocumented-return />
    <return>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <methodtemplate id="top1::BasicPolyPtr::is" name="is">
    <undocumented-return />
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <templatetypeparameter id="top1::BasicPolyPtr::is::T" name="T" />
    <templatetypeparameter id="top1::BasicPolyPtr::is">
      <default>
        <type name="T" />
      </default>
    </templatetypeparameter>
  </methodtemplate>
  <methodtemplate id="top1::BasicPolyPtr::get" name="get">
    <undocumented-return />
    <return>
      <type name="std::optional&lt;_Tp&gt;" />
    </return>
    <templatetypeparameter id="top1::BasicPolyPtr::get::T" name="T" />
    <templatetypeparameter id="top1::BasicPolyPtr::get">
      <default>
        <type name="T" />
      </default>
    </templatetypeparameter>
  </methodtemplate>
  <methodtemplate id="top1::BasicPolyPtr::get" name="get">
    <undocumented-return />
    <return>
      <type name="T" qualifier=" &amp;" />
    </return>
    <argument id="top1::BasicPolyPtr::get::fallback" name="fallback">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="top1::BasicPolyPtr::get::T" name="T" />
    <templatetypeparameter id="top1::BasicPolyPtr::get">
      <default>
        <type name="T" />
      </default>
    </templatetypeparameter>
  </methodtemplate>
  <methodtemplate id="top1::BasicPolyPtr::set" name="set">
    <undocumented-return />
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="top1::BasicPolyPtr::set::t" name="t">
      <type name="T" qualifier="*" />
    </argument>
    <templatetypeparameter id="top1::BasicPolyPtr::set::T" name="T" />
    <templatetypeparameter id="top1::BasicPolyPtr::set">
      <default>
        <type name="T" />
      </default>
    </templatetypeparameter>
  </methodtemplate>
  <method id="top1::BasicPolyPtr::base" name="base">
    <undocumented-return />
    <return>
      <type name="Base" qualifier="*" />
    </return>
  </method>
  <method id="top1::BasicPolyPtr::operator-&gt;" name="operator-&gt;">
    <undocumented-return />
    <return>
      <type name="Base" qualifier="*" />
    </return>
  </method>
  <conversionfunction id="top1::BasicPolyPtr::operator type-parameter-0-1 *" name="operator type-parameter-0-1 *">
    <undocumented-return />
    <return>
      <type name="Base" qualifier="*" />
    </return>
  </conversionfunction>
  <methodtemplate id="top1::BasicPolyPtr::operator=" name="operator=">
    <undocumented-return />
    <return>
      <type name="auto" />
    </return>
    <argument id="top1::BasicPolyPtr::operator=::t" name="t">
      <type name="T" qualifier="*" />
    </argument>
    <templatetypeparameter id="top1::BasicPolyPtr::operator=::T" name="T" />
    <templatetypeparameter id="top1::BasicPolyPtr::operator=">
      <default>
        <type name="T" />
      </default>
    </templatetypeparameter>
  </methodtemplate>
  <method id="top1::BasicPolyPtr::operator==" name="operator==">
    <undocumented-return />
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="top1::BasicPolyPtr::operator==::other" name="other">
      <type name="const BasicPolyPtr&lt;PtrType, Base, Types...&gt; &amp;&amp;" />
    </argument>
  </method>
  <method id="top1::BasicPolyPtr::operator!=" name="operator!=">
    <undocumented-return />
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="top1::BasicPolyPtr::operator!=::other" name="other">
      <type name="const BasicPolyPtr&lt;PtrType, Base, Types...&gt; &amp;&amp;" />
    </argument>
  </method>
  <methodtemplate id="top1::BasicPolyPtr::visit" name="visit">
    <undocumented-return />
    <return>
      <type name="decltype(auto)" />
    </return>
    <argument id="top1::BasicPolyPtr::visit::v" name="v">
      <type name="V" />
    </argument>
    <templatetypeparameter id="top1::BasicPolyPtr::visit::V" name="V" />
  </methodtemplate>
  <methodtemplate id="top1::BasicPolyPtr::match" name="match">
    <undocumented-return />
    <return>
      <type name="decltype(auto)" />
    </return>
    <argument id="top1::BasicPolyPtr::match::cases" name="cases">
      <type name="Cases..." />
    </argument>
    <templatetypeparameter id="top1::BasicPolyPtr::match::Cases" name="Cases" />
  </methodtemplate>
</classtemplate>
