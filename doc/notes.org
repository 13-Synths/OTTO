#+TITLE: TOP-1 Notes
#+AUTHOR: topisani

* Tapedeck
** Fields:
 - =TapeTime playPoint= :: Position of playhead
 - =TapeTime inPoint= :: Beginning of section
 - =TapeTime outPoint= :: End of section
The section is used for looping, copy/pasting, and possibly auto punch.
 - =bool loop= :: If enabled, the section will be looped
** Operations:
 - =play(float speed)= :: =speed= can be negative for reverse playback. This is also used for spooling the tape.
 - =stop()= :: stop playing (stops recording too)
 - =record()= :: Initiates recording. This will record to whatever the playback is doing, meaning you can record in reverse or double speed or whatever.
 - =stopRecording()= :: Stops recording, keeps playing
 - =goAbs(TapeTime time)= :: Jumps to =time=. Can not be used while playing
 - =lift()= :: Lift (cut) the section and put it in the clipboard
 - =drop()= :: Drop (paste) the section from the clipboard to the current position on the current track.

All of this has some significance to the way the =TapeBuffer= is implemented.
* TapeBuffer 
The =TapeBuffer= takes care of loading the tape from disk dynamically when needed.

** Operations 
 - =readFW(uint nframes)= :: Reads =nframes= frames forwards
 - =readBW(uint nframes)= :: Reads =nframes= frames backwards
 - =writeFW(uint nframes)= :: Writes =nframes= frames forwards
 - =writeBW(uint nframes)= :: Writes =nframes= frames backwards
 - =goTo(TapeTime time)= :: jumps to =time= on the tape. Sets the =playPoint= and starts loading dynamically.
** Implementation
The main part is easy, since in nearly all instances where we need the data, i.e. instances where we are either playing or recording, we are not jumping through the tape, we are moving slowly forwards or backwards. As such it just has to keep a section around =deck.playPoint= loaded.
*** Looping
The problem here is looping, since when doing that we suddenly have to perform a jump back to the beginning of the loop while playing. There are a few solutions to this problem:
 1. Limit the size of the loop so the entire loop can be kept in memory
 2. Load sections around =deck.inPoint=, =deck.outPoint= and =deck.playPoint=. This way we are always sure to have some data for where we could suddenly have to jump to
 3. While dynamically loading, simply read from =deck.inPoint= after =deck.outPoint=. The problem here is if looping is disabled at the last second. Also, if the loop is smaller than the buffer we might have two copies of the data, and lastly it would create problems with moving =deck.playPoint=
=(2.)= is the one that probably makes most sense. =(1.)= Limits the looping length, and will have a lot of unnecessary memory usage. Also =(2.)= is the one that will have least impact on how the buffer is accessed.

*** Track handeling
Tracks can be handled either in =TapeDeck= or here. If handled in the deck, =readFW= and =readBW= would return interleaved samples from all tracks, just as =writeFW= and =writeBW= would take an interleaved array of samples.
If handledd here in the =TapeBuffer=, =readFW=, =readBW=, =writeFW=, and =writeBW= would all take the track as an argument.

Considering other implementations than =libsndfile= in the future, handling tracks in the buffer would be best.

Another point is whether to keep the tracks here interleaved, or load them into separate buffers. It would really be better to seperate the tracks here in the non-real-time part, but it might be a bit harder to make sure the tracks all stay in sync.


